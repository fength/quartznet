using System;
using System.Threading.Tasks;

using Quartz;
using Quartz.Impl;
using System.Collections.Specialized;
using System.Threading;
using System.Diagnostics;

namespace QuartzSampleApp
{
    public class HelloJob : IJob, IInterruptableJob
    {
        public int id = -1;
        public Thread thread;
        public void ExeJob()
        {
            Console.WriteLine($"Hello World! -" + DateTime.Now.ToString());
            Thread.Sleep(2000);
            Console.WriteLine($"Hello World! -" + DateTime.Now.ToString());
            Thread.Sleep(2000);
            Console.WriteLine($"Hello World! -" + DateTime.Now.ToString());
            Thread.Sleep(2000);
            Console.WriteLine($"Hello World! -" + DateTime.Now.ToString());
            Thread.Sleep(2000);
        }
        /// <summary>
        /// Called by the <see cref="IScheduler" /> when a
        /// <see cref="ITrigger" /> fires that is associated with
        /// the <see cref="IJob" />.
        /// </summary>
        /// 
        public void Execute(IJobExecutionContext context)
        {
            thread = new Thread(ExeJob);
            thread.Start();
            //System.Diagnostics.Process p = System.Diagnostics.Process.Start("notepad.exe");
            //id = p.Id;
            //Console.WriteLine($"Hello World! -" + id.ToString());


            //p.WaitForExit(10000);
            ////終了したか確認する
            //if (p.HasExited)
            //{
            //    Console.WriteLine("終了しました。");
            //}
            //else
            //{
            //    Console.WriteLine("終了していません。");
            //}
            //var thread = new Thread(ExeJob);

            //thread.Start();
        }
        public void Interrupt()
        {
            Console.WriteLine("Kill start");
            thread.Abort(); ;
            thread.Join(); ;
            thread = null;
            Console.WriteLine("Kill end");
            //Process p = Process.GetProcessById(id);
            //p.Kill();
        }
    }
    public class Program
    {
        private static void Main(string[] args)
        {
            // trigger async evaluation
            RunProgram();
            Console.WriteLine("end");
            return;
        }

        private static void RunProgram()
        {
            try
            {

                StdSchedulerFactory factory = new StdSchedulerFactory();
                IScheduler scheduler = factory.GetScheduler();
                IJobDetail job = JobBuilder.Create<HelloJob>()
                    .WithIdentity("job1", "group1")
                    .Build();

                // Trigger the job to run on the next round minute
                ITrigger trigger = TriggerBuilder.Create()
                    .WithIdentity("trigger1", "group1")
                    .StartNow()
                    .Build();

                IJobDetail job1 = JobBuilder.Create<HelloJob>()
                    .WithIdentity("job2", "group2")
                    .Build();

                // Trigger the job to run on the next round minute
                ITrigger trigger1 = TriggerBuilder.Create()
                    .WithIdentity("trigger2", "group2")
                    .StartNow()
                    .Build();

                scheduler.ScheduleJob(job, trigger);
                scheduler.ScheduleJob(job1, trigger1);
                // and start it off
                scheduler.Start();
                Thread.Sleep(2000);
                JobKey jobKey = new JobKey("job1", "group1");
                scheduler.Interrupt(jobKey);


                //Thread.Sleep(5000);
                //scheduler.ResumeJob(jobKey);

                // some sleep to show what's happening
                Thread.Sleep(2000);


                // and last shut down the scheduler when you are ready to close your program
                scheduler.Shutdown();
                Console.WriteLine("Shutdown");
            }
            catch (SchedulerException se)
            {
                Console.Error.WriteLineAsync(se.ToString());
            }
        }
    }
}

// 
